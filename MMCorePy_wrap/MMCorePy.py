# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_MMCorePy', [dirname(__file__)])
        except ImportError:
            import _MMCorePy
            return _MMCorePy
        if fp is not None:
            try:
                _mod = imp.load_module('_MMCorePy', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _MMCorePy = swig_import_helper()
    del swig_import_helper
else:
    import _MMCorePy
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MMCorePy.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _MMCorePy.SwigPyIterator_value(self)
    def incr(self, n=1): return _MMCorePy.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _MMCorePy.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _MMCorePy.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _MMCorePy.SwigPyIterator_equal(self, *args)
    def copy(self): return _MMCorePy.SwigPyIterator_copy(self)
    def next(self): return _MMCorePy.SwigPyIterator_next(self)
    def __next__(self): return _MMCorePy.SwigPyIterator___next__(self)
    def previous(self): return _MMCorePy.SwigPyIterator_previous(self)
    def advance(self, *args): return _MMCorePy.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _MMCorePy.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _MMCorePy.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _MMCorePy.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _MMCorePy.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _MMCorePy.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _MMCorePy.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _MMCorePy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class CharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CharVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _MMCorePy.CharVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _MMCorePy.CharVector___nonzero__(self)
    def __bool__(self): return _MMCorePy.CharVector___bool__(self)
    def __len__(self): return _MMCorePy.CharVector___len__(self)
    def pop(self): return _MMCorePy.CharVector_pop(self)
    def __getslice__(self, *args): return _MMCorePy.CharVector___getslice__(self, *args)
    def __setslice__(self, *args): return _MMCorePy.CharVector___setslice__(self, *args)
    def __delslice__(self, *args): return _MMCorePy.CharVector___delslice__(self, *args)
    def __delitem__(self, *args): return _MMCorePy.CharVector___delitem__(self, *args)
    def __getitem__(self, *args): return _MMCorePy.CharVector___getitem__(self, *args)
    def __setitem__(self, *args): return _MMCorePy.CharVector___setitem__(self, *args)
    def append(self, *args): return _MMCorePy.CharVector_append(self, *args)
    def empty(self): return _MMCorePy.CharVector_empty(self)
    def size(self): return _MMCorePy.CharVector_size(self)
    def clear(self): return _MMCorePy.CharVector_clear(self)
    def swap(self, *args): return _MMCorePy.CharVector_swap(self, *args)
    def get_allocator(self): return _MMCorePy.CharVector_get_allocator(self)
    def begin(self): return _MMCorePy.CharVector_begin(self)
    def end(self): return _MMCorePy.CharVector_end(self)
    def rbegin(self): return _MMCorePy.CharVector_rbegin(self)
    def rend(self): return _MMCorePy.CharVector_rend(self)
    def pop_back(self): return _MMCorePy.CharVector_pop_back(self)
    def erase(self, *args): return _MMCorePy.CharVector_erase(self, *args)
    def __init__(self, *args): 
        this = _MMCorePy.new_CharVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _MMCorePy.CharVector_push_back(self, *args)
    def front(self): return _MMCorePy.CharVector_front(self)
    def back(self): return _MMCorePy.CharVector_back(self)
    def assign(self, *args): return _MMCorePy.CharVector_assign(self, *args)
    def resize(self, *args): return _MMCorePy.CharVector_resize(self, *args)
    def insert(self, *args): return _MMCorePy.CharVector_insert(self, *args)
    def reserve(self, *args): return _MMCorePy.CharVector_reserve(self, *args)
    def capacity(self): return _MMCorePy.CharVector_capacity(self)
    __swig_destroy__ = _MMCorePy.delete_CharVector
    __del__ = lambda self : None;
CharVector_swigregister = _MMCorePy.CharVector_swigregister
CharVector_swigregister(CharVector)

class LongVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _MMCorePy.LongVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _MMCorePy.LongVector___nonzero__(self)
    def __bool__(self): return _MMCorePy.LongVector___bool__(self)
    def __len__(self): return _MMCorePy.LongVector___len__(self)
    def pop(self): return _MMCorePy.LongVector_pop(self)
    def __getslice__(self, *args): return _MMCorePy.LongVector___getslice__(self, *args)
    def __setslice__(self, *args): return _MMCorePy.LongVector___setslice__(self, *args)
    def __delslice__(self, *args): return _MMCorePy.LongVector___delslice__(self, *args)
    def __delitem__(self, *args): return _MMCorePy.LongVector___delitem__(self, *args)
    def __getitem__(self, *args): return _MMCorePy.LongVector___getitem__(self, *args)
    def __setitem__(self, *args): return _MMCorePy.LongVector___setitem__(self, *args)
    def append(self, *args): return _MMCorePy.LongVector_append(self, *args)
    def empty(self): return _MMCorePy.LongVector_empty(self)
    def size(self): return _MMCorePy.LongVector_size(self)
    def clear(self): return _MMCorePy.LongVector_clear(self)
    def swap(self, *args): return _MMCorePy.LongVector_swap(self, *args)
    def get_allocator(self): return _MMCorePy.LongVector_get_allocator(self)
    def begin(self): return _MMCorePy.LongVector_begin(self)
    def end(self): return _MMCorePy.LongVector_end(self)
    def rbegin(self): return _MMCorePy.LongVector_rbegin(self)
    def rend(self): return _MMCorePy.LongVector_rend(self)
    def pop_back(self): return _MMCorePy.LongVector_pop_back(self)
    def erase(self, *args): return _MMCorePy.LongVector_erase(self, *args)
    def __init__(self, *args): 
        this = _MMCorePy.new_LongVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _MMCorePy.LongVector_push_back(self, *args)
    def front(self): return _MMCorePy.LongVector_front(self)
    def back(self): return _MMCorePy.LongVector_back(self)
    def assign(self, *args): return _MMCorePy.LongVector_assign(self, *args)
    def resize(self, *args): return _MMCorePy.LongVector_resize(self, *args)
    def insert(self, *args): return _MMCorePy.LongVector_insert(self, *args)
    def reserve(self, *args): return _MMCorePy.LongVector_reserve(self, *args)
    def capacity(self): return _MMCorePy.LongVector_capacity(self)
    __swig_destroy__ = _MMCorePy.delete_LongVector
    __del__ = lambda self : None;
LongVector_swigregister = _MMCorePy.LongVector_swigregister
LongVector_swigregister(LongVector)

class StrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _MMCorePy.StrVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _MMCorePy.StrVector___nonzero__(self)
    def __bool__(self): return _MMCorePy.StrVector___bool__(self)
    def __len__(self): return _MMCorePy.StrVector___len__(self)
    def pop(self): return _MMCorePy.StrVector_pop(self)
    def __getslice__(self, *args): return _MMCorePy.StrVector___getslice__(self, *args)
    def __setslice__(self, *args): return _MMCorePy.StrVector___setslice__(self, *args)
    def __delslice__(self, *args): return _MMCorePy.StrVector___delslice__(self, *args)
    def __delitem__(self, *args): return _MMCorePy.StrVector___delitem__(self, *args)
    def __getitem__(self, *args): return _MMCorePy.StrVector___getitem__(self, *args)
    def __setitem__(self, *args): return _MMCorePy.StrVector___setitem__(self, *args)
    def append(self, *args): return _MMCorePy.StrVector_append(self, *args)
    def empty(self): return _MMCorePy.StrVector_empty(self)
    def size(self): return _MMCorePy.StrVector_size(self)
    def clear(self): return _MMCorePy.StrVector_clear(self)
    def swap(self, *args): return _MMCorePy.StrVector_swap(self, *args)
    def get_allocator(self): return _MMCorePy.StrVector_get_allocator(self)
    def begin(self): return _MMCorePy.StrVector_begin(self)
    def end(self): return _MMCorePy.StrVector_end(self)
    def rbegin(self): return _MMCorePy.StrVector_rbegin(self)
    def rend(self): return _MMCorePy.StrVector_rend(self)
    def pop_back(self): return _MMCorePy.StrVector_pop_back(self)
    def erase(self, *args): return _MMCorePy.StrVector_erase(self, *args)
    def __init__(self, *args): 
        this = _MMCorePy.new_StrVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _MMCorePy.StrVector_push_back(self, *args)
    def front(self): return _MMCorePy.StrVector_front(self)
    def back(self): return _MMCorePy.StrVector_back(self)
    def assign(self, *args): return _MMCorePy.StrVector_assign(self, *args)
    def resize(self, *args): return _MMCorePy.StrVector_resize(self, *args)
    def insert(self, *args): return _MMCorePy.StrVector_insert(self, *args)
    def reserve(self, *args): return _MMCorePy.StrVector_reserve(self, *args)
    def capacity(self): return _MMCorePy.StrVector_capacity(self)
    __swig_destroy__ = _MMCorePy.delete_StrVector
    __del__ = lambda self : None;
StrVector_swigregister = _MMCorePy.StrVector_swigregister
StrVector_swigregister(StrVector)

class pair_ss(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pair_ss, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pair_ss, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MMCorePy.new_pair_ss(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _MMCorePy.pair_ss_first_set
    __swig_getmethods__["first"] = _MMCorePy.pair_ss_first_get
    if _newclass:first = _swig_property(_MMCorePy.pair_ss_first_get, _MMCorePy.pair_ss_first_set)
    __swig_setmethods__["second"] = _MMCorePy.pair_ss_second_set
    __swig_getmethods__["second"] = _MMCorePy.pair_ss_second_get
    if _newclass:second = _swig_property(_MMCorePy.pair_ss_second_get, _MMCorePy.pair_ss_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _MMCorePy.delete_pair_ss
    __del__ = lambda self : None;
pair_ss_swigregister = _MMCorePy.pair_ss_swigregister
pair_ss_swigregister(pair_ss)

class StrMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrMap, name)
    __repr__ = _swig_repr
    def iterator(self): return _MMCorePy.StrMap_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _MMCorePy.StrMap___nonzero__(self)
    def __bool__(self): return _MMCorePy.StrMap___bool__(self)
    def __len__(self): return _MMCorePy.StrMap___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _MMCorePy.StrMap___getitem__(self, *args)
    def __delitem__(self, *args): return _MMCorePy.StrMap___delitem__(self, *args)
    def has_key(self, *args): return _MMCorePy.StrMap_has_key(self, *args)
    def keys(self): return _MMCorePy.StrMap_keys(self)
    def values(self): return _MMCorePy.StrMap_values(self)
    def items(self): return _MMCorePy.StrMap_items(self)
    def __contains__(self, *args): return _MMCorePy.StrMap___contains__(self, *args)
    def key_iterator(self): return _MMCorePy.StrMap_key_iterator(self)
    def value_iterator(self): return _MMCorePy.StrMap_value_iterator(self)
    def __setitem__(self, *args): return _MMCorePy.StrMap___setitem__(self, *args)
    def asdict(self): return _MMCorePy.StrMap_asdict(self)
    def __init__(self, *args): 
        this = _MMCorePy.new_StrMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _MMCorePy.StrMap_empty(self)
    def size(self): return _MMCorePy.StrMap_size(self)
    def clear(self): return _MMCorePy.StrMap_clear(self)
    def swap(self, *args): return _MMCorePy.StrMap_swap(self, *args)
    def get_allocator(self): return _MMCorePy.StrMap_get_allocator(self)
    def begin(self): return _MMCorePy.StrMap_begin(self)
    def end(self): return _MMCorePy.StrMap_end(self)
    def rbegin(self): return _MMCorePy.StrMap_rbegin(self)
    def rend(self): return _MMCorePy.StrMap_rend(self)
    def count(self, *args): return _MMCorePy.StrMap_count(self, *args)
    def erase(self, *args): return _MMCorePy.StrMap_erase(self, *args)
    def find(self, *args): return _MMCorePy.StrMap_find(self, *args)
    def lower_bound(self, *args): return _MMCorePy.StrMap_lower_bound(self, *args)
    def upper_bound(self, *args): return _MMCorePy.StrMap_upper_bound(self, *args)
    __swig_destroy__ = _MMCorePy.delete_StrMap
    __del__ = lambda self : None;
StrMap_swigregister = _MMCorePy.StrMap_swigregister
StrMap_swigregister(StrMap)

MM_CODE_OK = _MMCorePy.MM_CODE_OK
MM_CODE_ERR = _MMCorePy.MM_CODE_ERR
DEVICE_OK = _MMCorePy.DEVICE_OK
DEVICE_ERR = _MMCorePy.DEVICE_ERR
DEVICE_INVALID_PROPERTY = _MMCorePy.DEVICE_INVALID_PROPERTY
DEVICE_INVALID_PROPERTY_VALUE = _MMCorePy.DEVICE_INVALID_PROPERTY_VALUE
DEVICE_DUPLICATE_PROPERTY = _MMCorePy.DEVICE_DUPLICATE_PROPERTY
DEVICE_INVALID_PROPERTY_TYPE = _MMCorePy.DEVICE_INVALID_PROPERTY_TYPE
DEVICE_NATIVE_MODULE_FAILED = _MMCorePy.DEVICE_NATIVE_MODULE_FAILED
DEVICE_UNSUPPORTED_DATA_FORMAT = _MMCorePy.DEVICE_UNSUPPORTED_DATA_FORMAT
DEVICE_INTERNAL_INCONSISTENCY = _MMCorePy.DEVICE_INTERNAL_INCONSISTENCY
DEVICE_NOT_SUPPORTED = _MMCorePy.DEVICE_NOT_SUPPORTED
DEVICE_UNKNOWN_LABEL = _MMCorePy.DEVICE_UNKNOWN_LABEL
DEVICE_UNSUPPORTED_COMMAND = _MMCorePy.DEVICE_UNSUPPORTED_COMMAND
DEVICE_UNKNOWN_POSITION = _MMCorePy.DEVICE_UNKNOWN_POSITION
DEVICE_NO_CALLBACK_REGISTERED = _MMCorePy.DEVICE_NO_CALLBACK_REGISTERED
DEVICE_SERIAL_COMMAND_FAILED = _MMCorePy.DEVICE_SERIAL_COMMAND_FAILED
DEVICE_SERIAL_BUFFER_OVERRUN = _MMCorePy.DEVICE_SERIAL_BUFFER_OVERRUN
DEVICE_SERIAL_INVALID_RESPONSE = _MMCorePy.DEVICE_SERIAL_INVALID_RESPONSE
DEVICE_SERIAL_TIMEOUT = _MMCorePy.DEVICE_SERIAL_TIMEOUT
DEVICE_SELF_REFERENCE = _MMCorePy.DEVICE_SELF_REFERENCE
DEVICE_NO_PROPERTY_DATA = _MMCorePy.DEVICE_NO_PROPERTY_DATA
DEVICE_DUPLICATE_LABEL = _MMCorePy.DEVICE_DUPLICATE_LABEL
DEVICE_INVALID_INPUT_PARAM = _MMCorePy.DEVICE_INVALID_INPUT_PARAM
DEVICE_BUFFER_OVERFLOW = _MMCorePy.DEVICE_BUFFER_OVERFLOW
DEVICE_NONEXISTENT_CHANNEL = _MMCorePy.DEVICE_NONEXISTENT_CHANNEL
DEVICE_INVALID_PROPERTY_LIMTS = _MMCorePy.DEVICE_INVALID_PROPERTY_LIMTS
DEVICE_SNAP_IMAGE_FAILED = _MMCorePy.DEVICE_SNAP_IMAGE_FAILED
DEVICE_IMAGE_PARAMS_FAILED = _MMCorePy.DEVICE_IMAGE_PARAMS_FAILED
DEVICE_CORE_FOCUS_STAGE_UNDEF = _MMCorePy.DEVICE_CORE_FOCUS_STAGE_UNDEF
DEVICE_CORE_EXPOSURE_FAILED = _MMCorePy.DEVICE_CORE_EXPOSURE_FAILED
DEVICE_CORE_CONFIG_FAILED = _MMCorePy.DEVICE_CORE_CONFIG_FAILED
DEVICE_CAMERA_BUSY_ACQUIRING = _MMCorePy.DEVICE_CAMERA_BUSY_ACQUIRING
DEVICE_INCOMPATIBLE_IMAGE = _MMCorePy.DEVICE_INCOMPATIBLE_IMAGE
DEVICE_CAN_NOT_SET_PROPERTY = _MMCorePy.DEVICE_CAN_NOT_SET_PROPERTY
DEVICE_CORE_CHANNEL_PRESETS_FAILED = _MMCorePy.DEVICE_CORE_CHANNEL_PRESETS_FAILED
DEVICE_LOCALLY_DEFINED_ERROR = _MMCorePy.DEVICE_LOCALLY_DEFINED_ERROR
DEVICE_NOT_CONNECTED = _MMCorePy.DEVICE_NOT_CONNECTED
DEVICE_COMM_HUB_MISSING = _MMCorePy.DEVICE_COMM_HUB_MISSING
DEVICE_DUPLICATE_LIBRARY = _MMCorePy.DEVICE_DUPLICATE_LIBRARY
DEVICE_PROPERTY_NOT_SEQUENCEABLE = _MMCorePy.DEVICE_PROPERTY_NOT_SEQUENCEABLE
DEVICE_SEQUENCE_TOO_LARGE = _MMCorePy.DEVICE_SEQUENCE_TOO_LARGE
DEVICE_OUT_OF_MEMORY = _MMCorePy.DEVICE_OUT_OF_MEMORY
DEVICE_NOT_YET_IMPLEMENTED = _MMCorePy.DEVICE_NOT_YET_IMPLEMENTED
UnknownType = _MMCorePy.UnknownType
AnyType = _MMCorePy.AnyType
CameraDevice = _MMCorePy.CameraDevice
ShutterDevice = _MMCorePy.ShutterDevice
StateDevice = _MMCorePy.StateDevice
StageDevice = _MMCorePy.StageDevice
XYStageDevice = _MMCorePy.XYStageDevice
SerialDevice = _MMCorePy.SerialDevice
GenericDevice = _MMCorePy.GenericDevice
AutoFocusDevice = _MMCorePy.AutoFocusDevice
CoreDevice = _MMCorePy.CoreDevice
ImageProcessorDevice = _MMCorePy.ImageProcessorDevice
ImageStreamerDevice = _MMCorePy.ImageStreamerDevice
SignalIODevice = _MMCorePy.SignalIODevice
MagnifierDevice = _MMCorePy.MagnifierDevice
ProgrammableIODevice = _MMCorePy.ProgrammableIODevice
SLMDevice = _MMCorePy.SLMDevice
CommandDispatchDevice = _MMCorePy.CommandDispatchDevice
HubDevice = _MMCorePy.HubDevice
GalvoDevice = _MMCorePy.GalvoDevice
Undef = _MMCorePy.Undef
String = _MMCorePy.String
Float = _MMCorePy.Float
Integer = _MMCorePy.Integer
NoAction = _MMCorePy.NoAction
BeforeGet = _MMCorePy.BeforeGet
AfterSet = _MMCorePy.AfterSet
IsSequenceable = _MMCorePy.IsSequenceable
AfterLoadSequence = _MMCorePy.AfterLoadSequence
StartSequence = _MMCorePy.StartSequence
StopSequence = _MMCorePy.StopSequence
InvalidPort = _MMCorePy.InvalidPort
SerialPort = _MMCorePy.SerialPort
USBPort = _MMCorePy.USBPort
Attention = _MMCorePy.Attention
Done = _MMCorePy.Done
StatusChanged = _MMCorePy.StatusChanged
Unimplemented = _MMCorePy.Unimplemented
Misconfigured = _MMCorePy.Misconfigured
CanNotCommunicate = _MMCorePy.CanNotCommunicate
CanCommunicate = _MMCorePy.CanCommunicate
class CMMError(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMMError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMMError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MMCorePy.new_CMMError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MMCorePy.delete_CMMError
    __del__ = lambda self : None;
    def getMsg(self): return _MMCorePy.CMMError_getMsg(self)
    def getCode(self): return _MMCorePy.CMMError_getCode(self)
    def setCoreMsg(self, *args): return _MMCorePy.CMMError_setCoreMsg(self, *args)
    def getCoreMsg(self): return _MMCorePy.CMMError_getCoreMsg(self)
    __swig_getmethods__["message"] = _MMCorePy.CMMError_message_get
    def __getitem__(self, *args): return _MMCorePy.CMMError___getitem__(self, *args)
    def __str__(self): return _MMCorePy.CMMError___str__(self)
CMMError_swigregister = _MMCorePy.CMMError_swigregister
CMMError_swigregister(CMMError)
cvar = _MMCorePy.cvar
MaxStrLength = cvar.MaxStrLength
g_Keyword_Name = cvar.g_Keyword_Name
g_Keyword_Description = cvar.g_Keyword_Description
g_Keyword_CameraName = cvar.g_Keyword_CameraName
g_Keyword_CameraID = cvar.g_Keyword_CameraID
g_Keyword_CameraChannelName = cvar.g_Keyword_CameraChannelName
g_Keyword_CameraChannelIndex = cvar.g_Keyword_CameraChannelIndex
g_Keyword_Binning = cvar.g_Keyword_Binning
g_Keyword_Exposure = cvar.g_Keyword_Exposure
g_Keyword_ActualExposure = cvar.g_Keyword_ActualExposure
g_Keyword_ActualInterval_ms = cvar.g_Keyword_ActualInterval_ms
g_Keyword_Interval_ms = cvar.g_Keyword_Interval_ms
g_Keyword_Elapsed_Time_ms = cvar.g_Keyword_Elapsed_Time_ms
g_Keyword_PixelType = cvar.g_Keyword_PixelType
g_Keyword_ReadoutTime = cvar.g_Keyword_ReadoutTime
g_Keyword_ReadoutMode = cvar.g_Keyword_ReadoutMode
g_Keyword_Gain = cvar.g_Keyword_Gain
g_Keyword_EMGain = cvar.g_Keyword_EMGain
g_Keyword_Offset = cvar.g_Keyword_Offset
g_Keyword_CCDTemperature = cvar.g_Keyword_CCDTemperature
g_Keyword_CCDTemperatureSetPoint = cvar.g_Keyword_CCDTemperatureSetPoint
g_Keyword_State = cvar.g_Keyword_State
g_Keyword_Label = cvar.g_Keyword_Label
g_Keyword_Position = cvar.g_Keyword_Position
g_Keyword_Type = cvar.g_Keyword_Type
g_Keyword_Delay = cvar.g_Keyword_Delay
g_Keyword_BaudRate = cvar.g_Keyword_BaudRate
g_Keyword_DataBits = cvar.g_Keyword_DataBits
g_Keyword_StopBits = cvar.g_Keyword_StopBits
g_Keyword_Parity = cvar.g_Keyword_Parity
g_Keyword_Handshaking = cvar.g_Keyword_Handshaking
g_Keyword_DelayBetweenCharsMs = cvar.g_Keyword_DelayBetweenCharsMs
g_Keyword_Port = cvar.g_Keyword_Port
g_Keyword_AnswerTimeout = cvar.g_Keyword_AnswerTimeout
g_Keyword_Speed = cvar.g_Keyword_Speed
g_Keyword_CoreDevice = cvar.g_Keyword_CoreDevice
g_Keyword_CoreInitialize = cvar.g_Keyword_CoreInitialize
g_Keyword_CoreCamera = cvar.g_Keyword_CoreCamera
g_Keyword_CoreShutter = cvar.g_Keyword_CoreShutter
g_Keyword_CoreXYStage = cvar.g_Keyword_CoreXYStage
g_Keyword_CoreFocus = cvar.g_Keyword_CoreFocus
g_Keyword_CoreAutoFocus = cvar.g_Keyword_CoreAutoFocus
g_Keyword_CoreAutoShutter = cvar.g_Keyword_CoreAutoShutter
g_Keyword_CoreChannelGroup = cvar.g_Keyword_CoreChannelGroup
g_Keyword_CoreImageProcessor = cvar.g_Keyword_CoreImageProcessor
g_Keyword_CoreSLM = cvar.g_Keyword_CoreSLM
g_Keyword_CoreGalvo = cvar.g_Keyword_CoreGalvo
g_Keyword_CoreTimeoutMs = cvar.g_Keyword_CoreTimeoutMs
g_Keyword_Channel = cvar.g_Keyword_Channel
g_Keyword_Version = cvar.g_Keyword_Version
g_Keyword_ColorMode = cvar.g_Keyword_ColorMode
g_Keyword_Transpose_SwapXY = cvar.g_Keyword_Transpose_SwapXY
g_Keyword_Transpose_MirrorX = cvar.g_Keyword_Transpose_MirrorX
g_Keyword_Transpose_MirrorY = cvar.g_Keyword_Transpose_MirrorY
g_Keyword_Transpose_Correction = cvar.g_Keyword_Transpose_Correction
g_Keyword_Closed_Position = cvar.g_Keyword_Closed_Position
g_Keyword_HubID = cvar.g_Keyword_HubID
g_Keyword_Metadata_Z = cvar.g_Keyword_Metadata_Z
g_Keyword_Meatdata_Exposure = cvar.g_Keyword_Meatdata_Exposure
g_Keyword_Metadata_Score = cvar.g_Keyword_Metadata_Score
g_Keyword_Metadata_ImageNumber = cvar.g_Keyword_Metadata_ImageNumber
g_Keyword_Metadata_StartTime = cvar.g_Keyword_Metadata_StartTime
g_Keyword_Metadata_ROI_X = cvar.g_Keyword_Metadata_ROI_X
g_Keyword_Metadata_ROI_Y = cvar.g_Keyword_Metadata_ROI_Y
g_FieldDelimiters = cvar.g_FieldDelimiters
g_CFGCommand_Device = cvar.g_CFGCommand_Device
g_CFGCommand_Label = cvar.g_CFGCommand_Label
g_CFGCommand_Property = cvar.g_CFGCommand_Property
g_CFGCommand_Configuration = cvar.g_CFGCommand_Configuration
g_CFGCommand_ConfigGroup = cvar.g_CFGCommand_ConfigGroup
g_CFGCommand_Equipment = cvar.g_CFGCommand_Equipment
g_CFGCommand_Delay = cvar.g_CFGCommand_Delay
g_CFGCommand_ImageSynchro = cvar.g_CFGCommand_ImageSynchro
g_CFGCommand_ConfigPixelSize = cvar.g_CFGCommand_ConfigPixelSize
g_CFGCommand_PixelSize_um = cvar.g_CFGCommand_PixelSize_um
g_CFGCommand_ParentID = cvar.g_CFGCommand_ParentID
g_CFGGroup_System = cvar.g_CFGGroup_System
g_CFGGroup_System_Startup = cvar.g_CFGGroup_System_Startup
g_CFGGroup_System_Shutdown = cvar.g_CFGGroup_System_Shutdown
g_CFGGroup_PixelSizeUm = cvar.g_CFGGroup_PixelSizeUm
_DATABITS_5 = cvar._DATABITS_5
_DATABITS_6 = cvar._DATABITS_6
_DATABITS_7 = cvar._DATABITS_7
_DATABITS_8 = cvar._DATABITS_8
_FLOWCONTROL_NONE = cvar._FLOWCONTROL_NONE
_FLOWCONTROL_RTSCTS_IN = cvar._FLOWCONTROL_RTSCTS_IN
_FLOWCONTROL_RTSCTS_OUT = cvar._FLOWCONTROL_RTSCTS_OUT
_FLOWCONTROL_XONXOFF_IN = cvar._FLOWCONTROL_XONXOFF_IN
_FLOWCONTROL_XONXOFF_OUT = cvar._FLOWCONTROL_XONXOFF_OUT
_PARITY_EVEN = cvar._PARITY_EVEN
_PARITY_MARK = cvar._PARITY_MARK
_PARITY_NONE = cvar._PARITY_NONE
_PARITY_ODD = cvar._PARITY_ODD
_PARITY_SPACE = cvar._PARITY_SPACE
_STOPBITS_1 = cvar._STOPBITS_1
_STOPBITS_1_5 = cvar._STOPBITS_1_5
_STOPBITS_2 = cvar._STOPBITS_2

class PropertySetting(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertySetting, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PropertySetting, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MMCorePy.new_PropertySetting(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MMCorePy.delete_PropertySetting
    __del__ = lambda self : None;
    def getDeviceLabel(self): return _MMCorePy.PropertySetting_getDeviceLabel(self)
    def getPropertyName(self): return _MMCorePy.PropertySetting_getPropertyName(self)
    def getReadOnly(self): return _MMCorePy.PropertySetting_getReadOnly(self)
    def getPropertyValue(self): return _MMCorePy.PropertySetting_getPropertyValue(self)
    def getKey(self): return _MMCorePy.PropertySetting_getKey(self)
    __swig_getmethods__["generateKey"] = lambda x: _MMCorePy.PropertySetting_generateKey
    if _newclass:generateKey = staticmethod(_MMCorePy.PropertySetting_generateKey)
    def Serialize(self): return _MMCorePy.PropertySetting_Serialize(self)
    def Restore(self, *args): return _MMCorePy.PropertySetting_Restore(self, *args)
    def getVerbose(self): return _MMCorePy.PropertySetting_getVerbose(self)
    def isEqualTo(self, *args): return _MMCorePy.PropertySetting_isEqualTo(self, *args)
PropertySetting_swigregister = _MMCorePy.PropertySetting_swigregister
PropertySetting_swigregister(PropertySetting)

def PropertySetting_generateKey(*args):
  return _MMCorePy.PropertySetting_generateKey(*args)
PropertySetting_generateKey = _MMCorePy.PropertySetting_generateKey

class PropertyPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertyPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PropertyPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MMCorePy.new_PropertyPair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MMCorePy.delete_PropertyPair
    __del__ = lambda self : None;
    def getPropertyName(self): return _MMCorePy.PropertyPair_getPropertyName(self)
    def getPropertyValue(self): return _MMCorePy.PropertyPair_getPropertyValue(self)
PropertyPair_swigregister = _MMCorePy.PropertyPair_swigregister
PropertyPair_swigregister(PropertyPair)

class Configuration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Configuration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Configuration, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _MMCorePy.new_Configuration()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MMCorePy.delete_Configuration
    __del__ = lambda self : None;
    def addSetting(self, *args): return _MMCorePy.Configuration_addSetting(self, *args)
    def deleteSetting(self, *args): return _MMCorePy.Configuration_deleteSetting(self, *args)
    def isPropertyIncluded(self, *args): return _MMCorePy.Configuration_isPropertyIncluded(self, *args)
    def isSettingIncluded(self, *args): return _MMCorePy.Configuration_isSettingIncluded(self, *args)
    def isConfigurationIncluded(self, *args): return _MMCorePy.Configuration_isConfigurationIncluded(self, *args)
    def getSetting(self, *args): return _MMCorePy.Configuration_getSetting(self, *args)
    def size(self): return _MMCorePy.Configuration_size(self)
    def getVerbose(self): return _MMCorePy.Configuration_getVerbose(self)
    def Serialize(self): return _MMCorePy.Configuration_Serialize(self)
    def Restore(self, *args): return _MMCorePy.Configuration_Restore(self, *args)
Configuration_swigregister = _MMCorePy.Configuration_swigregister
Configuration_swigregister(Configuration)

class PropertyBlock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertyBlock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PropertyBlock, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _MMCorePy.new_PropertyBlock()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MMCorePy.delete_PropertyBlock
    __del__ = lambda self : None;
    def addPair(self, *args): return _MMCorePy.PropertyBlock_addPair(self, *args)
    def getPair(self, *args): return _MMCorePy.PropertyBlock_getPair(self, *args)
    def size(self): return _MMCorePy.PropertyBlock_size(self)
    def getValue(self, *args): return _MMCorePy.PropertyBlock_getValue(self, *args)
PropertyBlock_swigregister = _MMCorePy.PropertyBlock_swigregister
PropertyBlock_swigregister(PropertyBlock)

class CMMCore(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMMCore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMMCore, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _MMCorePy.new_CMMCore()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MMCorePy.delete_CMMCore
    __del__ = lambda self : None;
    def loadDevice(self, *args): return _MMCorePy.CMMCore_loadDevice(self, *args)
    def unloadDevice(self, *args): return _MMCorePy.CMMCore_unloadDevice(self, *args)
    def unloadAllDevices(self): return _MMCorePy.CMMCore_unloadAllDevices(self)
    def initializeAllDevices(self): return _MMCorePy.CMMCore_initializeAllDevices(self)
    def initializeDevice(self, *args): return _MMCorePy.CMMCore_initializeDevice(self, *args)
    def updateCoreProperties(self): return _MMCorePy.CMMCore_updateCoreProperties(self)
    def reset(self): return _MMCorePy.CMMCore_reset(self)
    def clearLog(self): return _MMCorePy.CMMCore_clearLog(self)
    def enableDebugLog(self, *args): return _MMCorePy.CMMCore_enableDebugLog(self, *args)
    def debugLogEnabled(self): return _MMCorePy.CMMCore_debugLogEnabled(self)
    def enableStderrLog(self, *args): return _MMCorePy.CMMCore_enableStderrLog(self, *args)
    def getUserId(self): return _MMCorePy.CMMCore_getUserId(self)
    def getHostName(self): return _MMCorePy.CMMCore_getHostName(self)
    def logMessage(self, *args): return _MMCorePy.CMMCore_logMessage(self, *args)
    def saveLogArchive(self): return _MMCorePy.CMMCore_saveLogArchive(self)
    def saveLogArchiveWithPreamble(self, *args): return _MMCorePy.CMMCore_saveLogArchiveWithPreamble(self, *args)
    def getVersionInfo(self): return _MMCorePy.CMMCore_getVersionInfo(self)
    def getAPIVersionInfo(self): return _MMCorePy.CMMCore_getAPIVersionInfo(self)
    def getSystemState(self): return _MMCorePy.CMMCore_getSystemState(self)
    def getSystemStateCache(self): return _MMCorePy.CMMCore_getSystemStateCache(self)
    def updateSystemStateCache(self): return _MMCorePy.CMMCore_updateSystemStateCache(self)
    def setSystemState(self, *args): return _MMCorePy.CMMCore_setSystemState(self, *args)
    def getConfigState(self, *args): return _MMCorePy.CMMCore_getConfigState(self, *args)
    def getConfigGroupState(self, *args): return _MMCorePy.CMMCore_getConfigGroupState(self, *args)
    def getConfigGroupStateFromCache(self, *args): return _MMCorePy.CMMCore_getConfigGroupStateFromCache(self, *args)
    def saveSystemState(self, *args): return _MMCorePy.CMMCore_saveSystemState(self, *args)
    def loadSystemState(self, *args): return _MMCorePy.CMMCore_loadSystemState(self, *args)
    def saveSystemConfiguration(self, *args): return _MMCorePy.CMMCore_saveSystemConfiguration(self, *args)
    def loadSystemConfiguration(self, *args): return _MMCorePy.CMMCore_loadSystemConfiguration(self, *args)
    def registerCallback(self, *args): return _MMCorePy.CMMCore_registerCallback(self, *args)
    def getAvailableDevices(self, *args): return _MMCorePy.CMMCore_getAvailableDevices(self, *args)
    def getAvailableDeviceDescriptions(self, *args): return _MMCorePy.CMMCore_getAvailableDeviceDescriptions(self, *args)
    def getAvailableDeviceTypes(self, *args): return _MMCorePy.CMMCore_getAvailableDeviceTypes(self, *args)
    __swig_getmethods__["addSearchPath"] = lambda x: _MMCorePy.CMMCore_addSearchPath
    if _newclass:addSearchPath = staticmethod(_MMCorePy.CMMCore_addSearchPath)
    __swig_getmethods__["getDeviceLibraries"] = lambda x: _MMCorePy.CMMCore_getDeviceLibraries
    if _newclass:getDeviceLibraries = staticmethod(_MMCorePy.CMMCore_getDeviceLibraries)
    def getLoadedDevices(self): return _MMCorePy.CMMCore_getLoadedDevices(self)
    def getLoadedDevicesOfType(self, *args): return _MMCorePy.CMMCore_getLoadedDevicesOfType(self, *args)
    def getDevicePropertyNames(self, *args): return _MMCorePy.CMMCore_getDevicePropertyNames(self, *args)
    def getProperty(self, *args): return _MMCorePy.CMMCore_getProperty(self, *args)
    def getPropertyFromCache(self, *args): return _MMCorePy.CMMCore_getPropertyFromCache(self, *args)
    def setProperty(self, *args): return _MMCorePy.CMMCore_setProperty(self, *args)
    def hasProperty(self, *args): return _MMCorePy.CMMCore_hasProperty(self, *args)
    def getAllowedPropertyValues(self, *args): return _MMCorePy.CMMCore_getAllowedPropertyValues(self, *args)
    def isPropertyReadOnly(self, *args): return _MMCorePy.CMMCore_isPropertyReadOnly(self, *args)
    def isPropertyPreInit(self, *args): return _MMCorePy.CMMCore_isPropertyPreInit(self, *args)
    def isPropertySequenceable(self, *args): return _MMCorePy.CMMCore_isPropertySequenceable(self, *args)
    def hasPropertyLimits(self, *args): return _MMCorePy.CMMCore_hasPropertyLimits(self, *args)
    def getPropertyLowerLimit(self, *args): return _MMCorePy.CMMCore_getPropertyLowerLimit(self, *args)
    def getPropertyUpperLimit(self, *args): return _MMCorePy.CMMCore_getPropertyUpperLimit(self, *args)
    def startPropertySequence(self, *args): return _MMCorePy.CMMCore_startPropertySequence(self, *args)
    def stopPropertySequence(self, *args): return _MMCorePy.CMMCore_stopPropertySequence(self, *args)
    def getPropertySequenceMaxLength(self, *args): return _MMCorePy.CMMCore_getPropertySequenceMaxLength(self, *args)
    def loadPropertySequence(self, *args): return _MMCorePy.CMMCore_loadPropertySequence(self, *args)
    def getPropertyType(self, *args): return _MMCorePy.CMMCore_getPropertyType(self, *args)
    def getDeviceType(self, *args): return _MMCorePy.CMMCore_getDeviceType(self, *args)
    def getDeviceLibrary(self, *args): return _MMCorePy.CMMCore_getDeviceLibrary(self, *args)
    def unloadLibrary(self, *args): return _MMCorePy.CMMCore_unloadLibrary(self, *args)
    def getDeviceName(self, *args): return _MMCorePy.CMMCore_getDeviceName(self, *args)
    def getParentLabel(self, *args): return _MMCorePy.CMMCore_getParentLabel(self, *args)
    def setParentLabel(self, *args): return _MMCorePy.CMMCore_setParentLabel(self, *args)
    def getDeviceDescription(self, *args): return _MMCorePy.CMMCore_getDeviceDescription(self, *args)
    def deviceBusy(self, *args): return _MMCorePy.CMMCore_deviceBusy(self, *args)
    def waitForDevice(self, *args): return _MMCorePy.CMMCore_waitForDevice(self, *args)
    def waitForConfig(self, *args): return _MMCorePy.CMMCore_waitForConfig(self, *args)
    def systemBusy(self): return _MMCorePy.CMMCore_systemBusy(self)
    def waitForSystem(self): return _MMCorePy.CMMCore_waitForSystem(self)
    def waitForImageSynchro(self): return _MMCorePy.CMMCore_waitForImageSynchro(self)
    def deviceTypeBusy(self, *args): return _MMCorePy.CMMCore_deviceTypeBusy(self, *args)
    def waitForDeviceType(self, *args): return _MMCorePy.CMMCore_waitForDeviceType(self, *args)
    def sleep(self, *args): return _MMCorePy.CMMCore_sleep(self, *args)
    def getDeviceDelayMs(self, *args): return _MMCorePy.CMMCore_getDeviceDelayMs(self, *args)
    def setDeviceDelayMs(self, *args): return _MMCorePy.CMMCore_setDeviceDelayMs(self, *args)
    def setTimeoutMs(self, *args): return _MMCorePy.CMMCore_setTimeoutMs(self, *args)
    def getTimeoutMs(self): return _MMCorePy.CMMCore_getTimeoutMs(self)
    def usesDeviceDelay(self, *args): return _MMCorePy.CMMCore_usesDeviceDelay(self, *args)
    def getCoreErrorText(self, *args): return _MMCorePy.CMMCore_getCoreErrorText(self, *args)
    def getCameraDevice(self): return _MMCorePy.CMMCore_getCameraDevice(self)
    def getShutterDevice(self): return _MMCorePy.CMMCore_getShutterDevice(self)
    def getFocusDevice(self): return _MMCorePy.CMMCore_getFocusDevice(self)
    def getXYStageDevice(self): return _MMCorePy.CMMCore_getXYStageDevice(self)
    def getAutoFocusDevice(self): return _MMCorePy.CMMCore_getAutoFocusDevice(self)
    def getImageProcessorDevice(self): return _MMCorePy.CMMCore_getImageProcessorDevice(self)
    def getSLMDevice(self): return _MMCorePy.CMMCore_getSLMDevice(self)
    def getGalvoDevice(self): return _MMCorePy.CMMCore_getGalvoDevice(self)
    def getChannelGroup(self): return _MMCorePy.CMMCore_getChannelGroup(self)
    def setCameraDevice(self, *args): return _MMCorePy.CMMCore_setCameraDevice(self, *args)
    def setShutterDevice(self, *args): return _MMCorePy.CMMCore_setShutterDevice(self, *args)
    def setFocusDevice(self, *args): return _MMCorePy.CMMCore_setFocusDevice(self, *args)
    def setXYStageDevice(self, *args): return _MMCorePy.CMMCore_setXYStageDevice(self, *args)
    def setAutoFocusDevice(self, *args): return _MMCorePy.CMMCore_setAutoFocusDevice(self, *args)
    def setImageProcessorDevice(self, *args): return _MMCorePy.CMMCore_setImageProcessorDevice(self, *args)
    def setSLMDevice(self, *args): return _MMCorePy.CMMCore_setSLMDevice(self, *args)
    def setGalvoDevice(self, *args): return _MMCorePy.CMMCore_setGalvoDevice(self, *args)
    def setChannelGroup(self, *args): return _MMCorePy.CMMCore_setChannelGroup(self, *args)
    def defineConfig(self, *args): return _MMCorePy.CMMCore_defineConfig(self, *args)
    def defineConfigGroup(self, *args): return _MMCorePy.CMMCore_defineConfigGroup(self, *args)
    def deleteConfigGroup(self, *args): return _MMCorePy.CMMCore_deleteConfigGroup(self, *args)
    def renameConfigGroup(self, *args): return _MMCorePy.CMMCore_renameConfigGroup(self, *args)
    def isGroupDefined(self, *args): return _MMCorePy.CMMCore_isGroupDefined(self, *args)
    def isConfigDefined(self, *args): return _MMCorePy.CMMCore_isConfigDefined(self, *args)
    def setConfig(self, *args): return _MMCorePy.CMMCore_setConfig(self, *args)
    def deleteConfig(self, *args): return _MMCorePy.CMMCore_deleteConfig(self, *args)
    def renameConfig(self, *args): return _MMCorePy.CMMCore_renameConfig(self, *args)
    def getAvailableConfigGroups(self): return _MMCorePy.CMMCore_getAvailableConfigGroups(self)
    def getAvailableConfigs(self, *args): return _MMCorePy.CMMCore_getAvailableConfigs(self, *args)
    def getCurrentConfig(self, *args): return _MMCorePy.CMMCore_getCurrentConfig(self, *args)
    def getCurrentConfigFromCache(self, *args): return _MMCorePy.CMMCore_getCurrentConfigFromCache(self, *args)
    def getConfigData(self, *args): return _MMCorePy.CMMCore_getConfigData(self, *args)
    def getCurrentPixelSizeConfig(self, *args): return _MMCorePy.CMMCore_getCurrentPixelSizeConfig(self, *args)
    def getPixelSizeUm(self, *args): return _MMCorePy.CMMCore_getPixelSizeUm(self, *args)
    def getPixelSizeUmByID(self, *args): return _MMCorePy.CMMCore_getPixelSizeUmByID(self, *args)
    def getMagnificationFactor(self): return _MMCorePy.CMMCore_getMagnificationFactor(self)
    def setPixelSizeUm(self, *args): return _MMCorePy.CMMCore_setPixelSizeUm(self, *args)
    def definePixelSizeConfig(self, *args): return _MMCorePy.CMMCore_definePixelSizeConfig(self, *args)
    def getAvailablePixelSizeConfigs(self): return _MMCorePy.CMMCore_getAvailablePixelSizeConfigs(self)
    def isPixelSizeConfigDefined(self, *args): return _MMCorePy.CMMCore_isPixelSizeConfigDefined(self, *args)
    def setPixelSizeConfig(self, *args): return _MMCorePy.CMMCore_setPixelSizeConfig(self, *args)
    def renamePixelSizeConfig(self, *args): return _MMCorePy.CMMCore_renamePixelSizeConfig(self, *args)
    def deletePixelSizeConfig(self, *args): return _MMCorePy.CMMCore_deletePixelSizeConfig(self, *args)
    def getPixelSizeConfigData(self, *args): return _MMCorePy.CMMCore_getPixelSizeConfigData(self, *args)
    def setROI(self, *args): return _MMCorePy.CMMCore_setROI(self, *args)
    def getROI(self): return _MMCorePy.CMMCore_getROI(self)
    def clearROI(self): return _MMCorePy.CMMCore_clearROI(self)
    def setExposure(self, *args): return _MMCorePy.CMMCore_setExposure(self, *args)
    def getExposure(self): return _MMCorePy.CMMCore_getExposure(self)
    def getImage(self, *args): return _MMCorePy.CMMCore_getImage(self, *args)
    def snapImage(self): return _MMCorePy.CMMCore_snapImage(self)
    def getImageWidth(self): return _MMCorePy.CMMCore_getImageWidth(self)
    def getImageHeight(self): return _MMCorePy.CMMCore_getImageHeight(self)
    def getBytesPerPixel(self): return _MMCorePy.CMMCore_getBytesPerPixel(self)
    def getImageBitDepth(self): return _MMCorePy.CMMCore_getImageBitDepth(self)
    def getNumberOfComponents(self): return _MMCorePy.CMMCore_getNumberOfComponents(self)
    def getNumberOfCameraChannels(self): return _MMCorePy.CMMCore_getNumberOfCameraChannels(self)
    def getCameraChannelName(self, *args): return _MMCorePy.CMMCore_getCameraChannelName(self, *args)
    def getImageBufferSize(self): return _MMCorePy.CMMCore_getImageBufferSize(self)
    def assignImageSynchro(self, *args): return _MMCorePy.CMMCore_assignImageSynchro(self, *args)
    def removeImageSynchro(self, *args): return _MMCorePy.CMMCore_removeImageSynchro(self, *args)
    def removeImageSynchroAll(self): return _MMCorePy.CMMCore_removeImageSynchroAll(self)
    def setAutoShutter(self, *args): return _MMCorePy.CMMCore_setAutoShutter(self, *args)
    def getAutoShutter(self): return _MMCorePy.CMMCore_getAutoShutter(self)
    def setShutterOpen(self, *args): return _MMCorePy.CMMCore_setShutterOpen(self, *args)
    def getShutterOpen(self): return _MMCorePy.CMMCore_getShutterOpen(self)
    def startSequenceAcquisition(self, *args): return _MMCorePy.CMMCore_startSequenceAcquisition(self, *args)
    def prepareSequenceAcquisition(self, *args): return _MMCorePy.CMMCore_prepareSequenceAcquisition(self, *args)
    def startContinuousSequenceAcquisition(self, *args): return _MMCorePy.CMMCore_startContinuousSequenceAcquisition(self, *args)
    def stopSequenceAcquisition(self, *args): return _MMCorePy.CMMCore_stopSequenceAcquisition(self, *args)
    def isSequenceRunning(self, *args): return _MMCorePy.CMMCore_isSequenceRunning(self, *args)
    def getLastImage(self): return _MMCorePy.CMMCore_getLastImage(self)
    def popNextImage(self): return _MMCorePy.CMMCore_popNextImage(self)
    def getLastImageMD(self, *args): return _MMCorePy.CMMCore_getLastImageMD(self, *args)
    def getNBeforeLastImageMD(self, *args): return _MMCorePy.CMMCore_getNBeforeLastImageMD(self, *args)
    def popNextImageMD(self, *args): return _MMCorePy.CMMCore_popNextImageMD(self, *args)
    def getRemainingImageCount(self): return _MMCorePy.CMMCore_getRemainingImageCount(self)
    def getBufferTotalCapacity(self): return _MMCorePy.CMMCore_getBufferTotalCapacity(self)
    def getBufferFreeCapacity(self): return _MMCorePy.CMMCore_getBufferFreeCapacity(self)
    def getBufferIntervalMs(self): return _MMCorePy.CMMCore_getBufferIntervalMs(self)
    def isBufferOverflowed(self): return _MMCorePy.CMMCore_isBufferOverflowed(self)
    def setCircularBufferMemoryFootprint(self, *args): return _MMCorePy.CMMCore_setCircularBufferMemoryFootprint(self, *args)
    def initializeCircularBuffer(self): return _MMCorePy.CMMCore_initializeCircularBuffer(self)
    def clearCircularBuffer(self): return _MMCorePy.CMMCore_clearCircularBuffer(self)
    def isExposureSequenceable(self, *args): return _MMCorePy.CMMCore_isExposureSequenceable(self, *args)
    def startExposureSequence(self, *args): return _MMCorePy.CMMCore_startExposureSequence(self, *args)
    def stopExposureSequence(self, *args): return _MMCorePy.CMMCore_stopExposureSequence(self, *args)
    def getExposureSequenceMaxLength(self, *args): return _MMCorePy.CMMCore_getExposureSequenceMaxLength(self, *args)
    def loadExposureSequence(self, *args): return _MMCorePy.CMMCore_loadExposureSequence(self, *args)
    def getLastFocusScore(self): return _MMCorePy.CMMCore_getLastFocusScore(self)
    def getCurrentFocusScore(self): return _MMCorePy.CMMCore_getCurrentFocusScore(self)
    def enableContinuousFocus(self, *args): return _MMCorePy.CMMCore_enableContinuousFocus(self, *args)
    def isContinuousFocusEnabled(self): return _MMCorePy.CMMCore_isContinuousFocusEnabled(self)
    def isContinuousFocusLocked(self): return _MMCorePy.CMMCore_isContinuousFocusLocked(self)
    def isContinuousFocusDrive(self, *args): return _MMCorePy.CMMCore_isContinuousFocusDrive(self, *args)
    def fullFocus(self): return _MMCorePy.CMMCore_fullFocus(self)
    def incrementalFocus(self): return _MMCorePy.CMMCore_incrementalFocus(self)
    def setAutoFocusOffset(self, *args): return _MMCorePy.CMMCore_setAutoFocusOffset(self, *args)
    def getAutoFocusOffset(self): return _MMCorePy.CMMCore_getAutoFocusOffset(self)
    def setState(self, *args): return _MMCorePy.CMMCore_setState(self, *args)
    def getState(self, *args): return _MMCorePy.CMMCore_getState(self, *args)
    def getNumberOfStates(self, *args): return _MMCorePy.CMMCore_getNumberOfStates(self, *args)
    def setStateLabel(self, *args): return _MMCorePy.CMMCore_setStateLabel(self, *args)
    def getStateLabel(self, *args): return _MMCorePy.CMMCore_getStateLabel(self, *args)
    def defineStateLabel(self, *args): return _MMCorePy.CMMCore_defineStateLabel(self, *args)
    def getStateLabels(self, *args): return _MMCorePy.CMMCore_getStateLabels(self, *args)
    def getStateFromLabel(self, *args): return _MMCorePy.CMMCore_getStateFromLabel(self, *args)
    def getStateLabelData(self, *args): return _MMCorePy.CMMCore_getStateLabelData(self, *args)
    def getData(self, *args): return _MMCorePy.CMMCore_getData(self, *args)
    def definePropertyBlock(self, *args): return _MMCorePy.CMMCore_definePropertyBlock(self, *args)
    def getAvailablePropertyBlocks(self): return _MMCorePy.CMMCore_getAvailablePropertyBlocks(self)
    def getPropertyBlockData(self, *args): return _MMCorePy.CMMCore_getPropertyBlockData(self, *args)
    def setPosition(self, *args): return _MMCorePy.CMMCore_setPosition(self, *args)
    def getPosition(self, *args): return _MMCorePy.CMMCore_getPosition(self, *args)
    def setRelativePosition(self, *args): return _MMCorePy.CMMCore_setRelativePosition(self, *args)
    def setOrigin(self, *args): return _MMCorePy.CMMCore_setOrigin(self, *args)
    def setAdapterOrigin(self, *args): return _MMCorePy.CMMCore_setAdapterOrigin(self, *args)
    def setXYPosition(self, *args): return _MMCorePy.CMMCore_setXYPosition(self, *args)
    def setRelativeXYPosition(self, *args): return _MMCorePy.CMMCore_setRelativeXYPosition(self, *args)
    def getXYPosition(self, *args): return _MMCorePy.CMMCore_getXYPosition(self, *args)
    def getXPosition(self, *args): return _MMCorePy.CMMCore_getXPosition(self, *args)
    def getYPosition(self, *args): return _MMCorePy.CMMCore_getYPosition(self, *args)
    def stop(self, *args): return _MMCorePy.CMMCore_stop(self, *args)
    def home(self, *args): return _MMCorePy.CMMCore_home(self, *args)
    def setOriginXY(self, *args): return _MMCorePy.CMMCore_setOriginXY(self, *args)
    def setAdapterOriginXY(self, *args): return _MMCorePy.CMMCore_setAdapterOriginXY(self, *args)
    def homeFocus(self, *args): return _MMCorePy.CMMCore_homeFocus(self, *args)
    def homeXY(self, *args): return _MMCorePy.CMMCore_homeXY(self, *args)
    def isStageSequenceable(self, *args): return _MMCorePy.CMMCore_isStageSequenceable(self, *args)
    def startStageSequence(self, *args): return _MMCorePy.CMMCore_startStageSequence(self, *args)
    def stopStageSequence(self, *args): return _MMCorePy.CMMCore_stopStageSequence(self, *args)
    def getStageSequenceMaxLength(self, *args): return _MMCorePy.CMMCore_getStageSequenceMaxLength(self, *args)
    def loadStageSequence(self, *args): return _MMCorePy.CMMCore_loadStageSequence(self, *args)
    def isXYStageSequenceable(self, *args): return _MMCorePy.CMMCore_isXYStageSequenceable(self, *args)
    def startXYStageSequence(self, *args): return _MMCorePy.CMMCore_startXYStageSequence(self, *args)
    def stopXYStageSequence(self, *args): return _MMCorePy.CMMCore_stopXYStageSequence(self, *args)
    def getXYStageSequenceMaxLength(self, *args): return _MMCorePy.CMMCore_getXYStageSequenceMaxLength(self, *args)
    def loadXYStageSequence(self, *args): return _MMCorePy.CMMCore_loadXYStageSequence(self, *args)
    def setSerialProperties(self, *args): return _MMCorePy.CMMCore_setSerialProperties(self, *args)
    def setSerialPortCommand(self, *args): return _MMCorePy.CMMCore_setSerialPortCommand(self, *args)
    def getSerialPortAnswer(self, *args): return _MMCorePy.CMMCore_getSerialPortAnswer(self, *args)
    def writeToSerialPort(self, *args): return _MMCorePy.CMMCore_writeToSerialPort(self, *args)
    def readFromSerialPort(self, *args): return _MMCorePy.CMMCore_readFromSerialPort(self, *args)
    def setSLMImage(self, *args): return _MMCorePy.CMMCore_setSLMImage(self, *args)
    def setSLMPixelsTo(self, *args): return _MMCorePy.CMMCore_setSLMPixelsTo(self, *args)
    def displaySLMImage(self, *args): return _MMCorePy.CMMCore_displaySLMImage(self, *args)
    def getSLMWidth(self, *args): return _MMCorePy.CMMCore_getSLMWidth(self, *args)
    def getSLMHeight(self, *args): return _MMCorePy.CMMCore_getSLMHeight(self, *args)
    def getSLMNumberOfComponents(self, *args): return _MMCorePy.CMMCore_getSLMNumberOfComponents(self, *args)
    def getSLMBytesPerPixel(self, *args): return _MMCorePy.CMMCore_getSLMBytesPerPixel(self, *args)
    def pointGalvoAndFire(self, *args): return _MMCorePy.CMMCore_pointGalvoAndFire(self, *args)
    def setGalvoSpotInterval(self, *args): return _MMCorePy.CMMCore_setGalvoSpotInterval(self, *args)
    def setGalvoPosition(self, *args): return _MMCorePy.CMMCore_setGalvoPosition(self, *args)
    def getGalvoPosition(self, *args): return _MMCorePy.CMMCore_getGalvoPosition(self, *args)
    def setGalvoIlluminationState(self, *args): return _MMCorePy.CMMCore_setGalvoIlluminationState(self, *args)
    def getGalvoXRange(self, *args): return _MMCorePy.CMMCore_getGalvoXRange(self, *args)
    def getGalvoYRange(self, *args): return _MMCorePy.CMMCore_getGalvoYRange(self, *args)
    def addGalvoPolygonVertex(self, *args): return _MMCorePy.CMMCore_addGalvoPolygonVertex(self, *args)
    def deleteGalvoPolygons(self, *args): return _MMCorePy.CMMCore_deleteGalvoPolygons(self, *args)
    def loadGalvoPolygons(self, *args): return _MMCorePy.CMMCore_loadGalvoPolygons(self, *args)
    def setGalvoPolygonRepetitions(self, *args): return _MMCorePy.CMMCore_setGalvoPolygonRepetitions(self, *args)
    def runGalvoPolygons(self, *args): return _MMCorePy.CMMCore_runGalvoPolygons(self, *args)
    def runGalvoSequence(self, *args): return _MMCorePy.CMMCore_runGalvoSequence(self, *args)
    def getGalvoChannel(self, *args): return _MMCorePy.CMMCore_getGalvoChannel(self, *args)
    def acqBeforeFrame(self): return _MMCorePy.CMMCore_acqBeforeFrame(self)
    def acqAfterFrame(self): return _MMCorePy.CMMCore_acqAfterFrame(self)
    def detectDevice(self, *args): return _MMCorePy.CMMCore_detectDevice(self, *args)
    def getInstalledDevices(self, *args): return _MMCorePy.CMMCore_getInstalledDevices(self, *args)
    def getInstalledDeviceDescription(self, *args): return _MMCorePy.CMMCore_getInstalledDeviceDescription(self, *args)
    def getLoadedPeripheralDevices(self, *args): return _MMCorePy.CMMCore_getLoadedPeripheralDevices(self, *args)
    def getMACAddresses(self): return _MMCorePy.CMMCore_getMACAddresses(self)
CMMCore_swigregister = _MMCorePy.CMMCore_swigregister
CMMCore_swigregister(CMMCore)

def CMMCore_addSearchPath(*args):
  return _MMCorePy.CMMCore_addSearchPath(*args)
CMMCore_addSearchPath = _MMCorePy.CMMCore_addSearchPath

def CMMCore_getDeviceLibraries():
  return _MMCorePy.CMMCore_getDeviceLibraries()
CMMCore_getDeviceLibraries = _MMCorePy.CMMCore_getDeviceLibraries

class MetadataError(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetadataError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MetadataError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MMCorePy.new_MetadataError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MMCorePy.delete_MetadataError
    __del__ = lambda self : None;
    def getMsg(self): return _MMCorePy.MetadataError_getMsg(self)
MetadataError_swigregister = _MMCorePy.MetadataError_swigregister
MetadataError_swigregister(MetadataError)

class MetadataKeyError(MetadataError):
    __swig_setmethods__ = {}
    for _s in [MetadataError]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetadataKeyError, name, value)
    __swig_getmethods__ = {}
    for _s in [MetadataError]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MetadataKeyError, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _MMCorePy.new_MetadataKeyError()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MMCorePy.delete_MetadataKeyError
    __del__ = lambda self : None;
    __swig_getmethods__["message"] = _MMCorePy.MetadataKeyError_message_get
    def __getitem__(self, *args): return _MMCorePy.MetadataKeyError___getitem__(self, *args)
    def __str__(self): return _MMCorePy.MetadataKeyError___str__(self)
MetadataKeyError_swigregister = _MMCorePy.MetadataKeyError_swigregister
MetadataKeyError_swigregister(MetadataKeyError)

class MetadataIndexError(MetadataError):
    __swig_setmethods__ = {}
    for _s in [MetadataError]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetadataIndexError, name, value)
    __swig_getmethods__ = {}
    for _s in [MetadataError]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MetadataIndexError, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _MMCorePy.new_MetadataIndexError()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MMCorePy.delete_MetadataIndexError
    __del__ = lambda self : None;
    __swig_getmethods__["message"] = _MMCorePy.MetadataIndexError_message_get
    if _newclass:message = _swig_property(_MMCorePy.MetadataIndexError_message_get)
    def __getitem__(self, *args): return _MMCorePy.MetadataIndexError___getitem__(self, *args)
    def __str__(self): return _MMCorePy.MetadataIndexError___str__(self)
MetadataIndexError_swigregister = _MMCorePy.MetadataIndexError_swigregister
MetadataIndexError_swigregister(MetadataIndexError)

class MetadataTag(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetadataTag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MetadataTag, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MMCorePy.delete_MetadataTag
    __del__ = lambda self : None;
    def GetDevice(self): return _MMCorePy.MetadataTag_GetDevice(self)
    def GetName(self): return _MMCorePy.MetadataTag_GetName(self)
    def GetQualifiedName(self): return _MMCorePy.MetadataTag_GetQualifiedName(self)
    def IsReadOnly(self): return _MMCorePy.MetadataTag_IsReadOnly(self)
    def SetDevice(self, *args): return _MMCorePy.MetadataTag_SetDevice(self, *args)
    def SetName(self, *args): return _MMCorePy.MetadataTag_SetName(self, *args)
    def SetReadOnly(self, *args): return _MMCorePy.MetadataTag_SetReadOnly(self, *args)
    def ToSingleTag(self): return _MMCorePy.MetadataTag_ToSingleTag(self)
    def ToArrayTag(self): return _MMCorePy.MetadataTag_ToArrayTag(self)
    def Clone(self): return _MMCorePy.MetadataTag_Clone(self)
    def Serialize(self): return _MMCorePy.MetadataTag_Serialize(self)
    def Restore(self, *args): return _MMCorePy.MetadataTag_Restore(self, *args)
MetadataTag_swigregister = _MMCorePy.MetadataTag_swigregister
MetadataTag_swigregister(MetadataTag)

class MetadataSingleTag(MetadataTag):
    __swig_setmethods__ = {}
    for _s in [MetadataTag]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetadataSingleTag, name, value)
    __swig_getmethods__ = {}
    for _s in [MetadataTag]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MetadataSingleTag, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MMCorePy.new_MetadataSingleTag(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MMCorePy.delete_MetadataSingleTag
    __del__ = lambda self : None;
    def GetValue(self): return _MMCorePy.MetadataSingleTag_GetValue(self)
    def SetValue(self, *args): return _MMCorePy.MetadataSingleTag_SetValue(self, *args)
    def ToSingleTag(self): return _MMCorePy.MetadataSingleTag_ToSingleTag(self)
    def Clone(self): return _MMCorePy.MetadataSingleTag_Clone(self)
    def Serialize(self): return _MMCorePy.MetadataSingleTag_Serialize(self)
    def Restore(self, *args): return _MMCorePy.MetadataSingleTag_Restore(self, *args)
MetadataSingleTag_swigregister = _MMCorePy.MetadataSingleTag_swigregister
MetadataSingleTag_swigregister(MetadataSingleTag)

class MetadataArrayTag(MetadataTag):
    __swig_setmethods__ = {}
    for _s in [MetadataTag]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetadataArrayTag, name, value)
    __swig_getmethods__ = {}
    for _s in [MetadataTag]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MetadataArrayTag, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _MMCorePy.new_MetadataArrayTag()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MMCorePy.delete_MetadataArrayTag
    __del__ = lambda self : None;
    def ToArrayTag(self): return _MMCorePy.MetadataArrayTag_ToArrayTag(self)
    def AddValue(self, *args): return _MMCorePy.MetadataArrayTag_AddValue(self, *args)
    def SetValue(self, *args): return _MMCorePy.MetadataArrayTag_SetValue(self, *args)
    def GetValue(self, *args): return _MMCorePy.MetadataArrayTag_GetValue(self, *args)
    def GetSize(self): return _MMCorePy.MetadataArrayTag_GetSize(self)
    def Clone(self): return _MMCorePy.MetadataArrayTag_Clone(self)
    def Serialize(self): return _MMCorePy.MetadataArrayTag_Serialize(self)
    def Restore(self, *args): return _MMCorePy.MetadataArrayTag_Restore(self, *args)
MetadataArrayTag_swigregister = _MMCorePy.MetadataArrayTag_swigregister
MetadataArrayTag_swigregister(MetadataArrayTag)

class Metadata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Metadata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Metadata, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _MMCorePy.delete_Metadata
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _MMCorePy.new_Metadata(*args)
        try: self.this.append(this)
        except: self.this = this
    def Clear(self): return _MMCorePy.Metadata_Clear(self)
    def GetKeys(self): return _MMCorePy.Metadata_GetKeys(self)
    def HasTag(self, *args): return _MMCorePy.Metadata_HasTag(self, *args)
    def GetSingleTag(self, *args): return _MMCorePy.Metadata_GetSingleTag(self, *args)
    def GetArrayTag(self, *args): return _MMCorePy.Metadata_GetArrayTag(self, *args)
    def SetTag(self, *args): return _MMCorePy.Metadata_SetTag(self, *args)
    def RemoveTag(self, *args): return _MMCorePy.Metadata_RemoveTag(self, *args)
    def Merge(self, *args): return _MMCorePy.Metadata_Merge(self, *args)
    def Serialize(self): return _MMCorePy.Metadata_Serialize(self)
    def readLine(self, *args): return _MMCorePy.Metadata_readLine(self, *args)
    def Restore(self, *args): return _MMCorePy.Metadata_Restore(self, *args)
    def Dump(self): return _MMCorePy.Metadata_Dump(self)
Metadata_swigregister = _MMCorePy.Metadata_swigregister
Metadata_swigregister(Metadata)

class MMEventCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MMEventCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MMEventCallback, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == MMEventCallback:
            _self = None
        else:
            _self = self
        this = _MMCorePy.new_MMEventCallback(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MMCorePy.delete_MMEventCallback
    __del__ = lambda self : None;
    def onPropertiesChanged(self): return _MMCorePy.MMEventCallback_onPropertiesChanged(self)
    def onPropertyChanged(self, *args): return _MMCorePy.MMEventCallback_onPropertyChanged(self, *args)
    def onConfigGroupChanged(self, *args): return _MMCorePy.MMEventCallback_onConfigGroupChanged(self, *args)
    def onPixelSizeChanged(self, *args): return _MMCorePy.MMEventCallback_onPixelSizeChanged(self, *args)
    def onStagePositionChanged(self, *args): return _MMCorePy.MMEventCallback_onStagePositionChanged(self, *args)
    def onStagePositionChangedRelative(self, *args): return _MMCorePy.MMEventCallback_onStagePositionChangedRelative(self, *args)
    def onXYStagePositionChanged(self, *args): return _MMCorePy.MMEventCallback_onXYStagePositionChanged(self, *args)
    def onXYStagePositionChangedRelative(self, *args): return _MMCorePy.MMEventCallback_onXYStagePositionChangedRelative(self, *args)
    def onExposureChanged(self, *args): return _MMCorePy.MMEventCallback_onExposureChanged(self, *args)
    def __disown__(self):
        self.this.disown()
        _MMCorePy.disown_MMEventCallback(self)
        return weakref_proxy(self)
MMEventCallback_swigregister = _MMCorePy.MMEventCallback_swigregister
MMEventCallback_swigregister(MMEventCallback)

# This file is compatible with both classic and new-style classes.


